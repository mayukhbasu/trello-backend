name: CI/CD Pipeline for GraphQL APIs

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Authenticate with Google Cloud using a service account
      - name: Set up Google Cloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # Step 3: Set up Google Cloud CLI
      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Step 4: Configure Docker to use gcloud for authentication
      - name: Configure Docker to use gcloud for authentication
        run: |
          gcloud auth configure-docker --quiet

      # Step 5: Set Node.js version to 18.x
      - name: Setup Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 6: Use MONGODB_URI from GitHub Secrets
      - name: Set MongoDB URI from GitHub Secrets
        run: echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> $GITHUB_ENV

      # Step 7: Build and push Docker images for GraphQL APIs to GCR
      - name: Build and push user-service Docker image
        run: |
          docker build --platform linux/amd64 -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service ./services/user-service
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service

      - name: Build and push task-service Docker image
        run: |
          docker build --platform linux/amd64 -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/task-service ./services/task-service
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/task-service

      - name: Build and push board-service Docker image
        run: |
          docker build --platform linux/amd64 -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/board-service ./services/board-service
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/board-service

      # Step 8: Deploy the APIs to Google Cloud Run
      - name: Deploy user-service to Cloud Run
        run: |
          gcloud run deploy user-service --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service --platform managed --region ${{ secrets.GCP_REGION }} --allow-unauthenticated

      - name: Deploy task-service to Cloud Run
        run: |
          gcloud run deploy task-service --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/task-service --platform managed --region ${{ secrets.GCP_REGION }} --allow-unauthenticated

      - name: Deploy board-service to Cloud Run
        run: |
          gcloud run deploy board-service --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/board-service --platform managed --region ${{ secrets.GCP_REGION }} --allow-unauthenticated

      # Step 9: Generate a unique API Gateway config name
      - name: Generate unique API Gateway config name
        run: |
          TIMESTAMP=$(date +%s)  # Use timestamp to make it unique
          echo "CONFIG_NAME=trello-backend-config-$TIMESTAMP" >> $GITHUB_ENV  # Save it as an environment variable

      # Step 10: Deploy API Gateway with the dynamically generated config name
      - name: Deploy API Gateway with dynamic config
        run: |
          gcloud api-gateway api-configs create $CONFIG_NAME \
              --api=trello-backend-api \
              --openapi-spec=api-gateway.yaml \
              --project=${{ secrets.GCP_PROJECT_ID }}

      # Step 11: Deploy API Gateway with the new configuration
      - name: Deploy API Gateway
        run: |
          gcloud api-gateway gateways update trello-backend-gateway \
              --api=trello-backend-api \
              --api-config=$CONFIG_NAME \
              --location=${{ secrets.GCP_REGION }} \
              --project=${{ secrets.GCP_PROJECT_ID }}
