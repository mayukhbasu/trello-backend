name: CI/CD Pipeline for GraphQL APIs

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering from the GitHub UI

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Authenticate with Google Cloud using a service account
      - name: Set up Google Cloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # Step 3: Set up Google Cloud CLI
      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Step 4: Configure Docker to use gcloud for authentication
      - name: Configure Docker to use gcloud for authentication
        run: |
          gcloud auth configure-docker --quiet

      # Step 5: Build and push Docker images for GraphQL APIs to GCR
      - name: Build and push user-service Docker image
        run: |
          docker build --platform linux/amd64 -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service ./services/user-service
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service

      - name: Build and push task-service Docker image
        run: |
          docker build --platform linux/amd64 -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/task-service ./services/task-service
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/task-service

      - name: Build and push board-service Docker image
        run: |
          docker build --platform linux/amd64 -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/board-service ./services/board-service
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/board-service

      # Step 6: Deploy the APIs to Google Cloud Run
      - name: Deploy user-service to Cloud Run
        run: |
          gcloud run deploy user-service --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service --platform managed --region ${{ secrets.GCP_REGION }} --allow-unauthenticated

      - name: Deploy task-service to Cloud Run
        run: |
          gcloud run deploy task-service --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/task-service --platform managed --region ${{ secrets.GCP_REGION }} --allow-unauthenticated

      - name: Deploy board-service to Cloud Run
        run: |
          gcloud run deploy board-service --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/board-service --platform managed --region ${{ secrets.GCP_REGION }} --allow-unauthenticated

      # Step 7: Retrieve URLs for Cloud Run services
      - name: Retrieve Cloud Run URLs
        id: urls
        run: |
          USER_URL=$(gcloud run services describe user-service --platform managed --region ${{ secrets.GCP_REGION }} --format='value(status.url)')
          TASK_URL=$(gcloud run services describe task-service --platform managed --region ${{ secrets.GCP_REGION }} --format='value(status.url)')
          BOARD_URL=$(gcloud run services describe board-service --platform managed --region ${{ secrets.GCP_REGION }} --format='value(status.url)')
          echo "USER_URL=$USER_URL" >> $GITHUB_ENV
          echo "TASK_URL=$TASK_URL" >> $GITHUB_ENV
          echo "BOARD_URL=$BOARD_URL" >> $GITHUB_ENV

      # Step 8: Dynamically create OpenAPI spec with service URLs
      - name: Dynamically create OpenAPI spec with service URLs
        run: |
          echo 'swagger: "2.0"
          info:
            title: "GraphQL API Gateway"
            version: "1.0.0"
          paths:
            /user:
              post:
                summary: "User Service"
                operationId: userService
                x-google-backend:
                  address: '${USER_URL}'
                responses:
                  "200":
                    description: "A successful response"
            /task:
              post:
                summary: "Task Service"
                operationId: taskService
                x-google-backend:
                  address: '${TASK_URL}'
                responses:
                  "200":
                    description: "A successful response"
            /board:
              post:
                summary: "Board Service"
                operationId: boardService
                x-google-backend:
                  address: '${BOARD_URL}'
                responses:
                  "200":
                    description: "A successful response"' > new-api-gateway.yaml

      # Step 9: Detach API Gateway from current config by pointing to a placeholder
      - name: Detach API Gateway from current config with placeholder
        run: |
          echo 'swagger: "2.0"
          info:
            title: "Placeholder API Gateway"
            version: "1.0.0"
          paths:
            /:
              get:
                summary: "Placeholder response"
                operationId: placeholderOperation
                x-google-backend:
                  address: https://httpbin.org/get
                responses:
                  "200":
                    description: "A successful response"' > placeholder-api-gateway.yaml
          
          gcloud api-gateway api-configs create placeholder-config \
              --api=trello-backend-api \
              --openapi-spec=placeholder-api-gateway.yaml \
              --project=${{ secrets.GCP_PROJECT_ID }}

          gcloud api-gateway gateways update trello-backend-gateway \
              --api=trello-backend-api \
              --api-config=placeholder-config \
              --location=${{ secrets.GCP_REGION }} \
              --project=${{ secrets.GCP_PROJECT_ID }}

      # Step 10: Delete API Gateway config if it exists
      - name: Delete API Gateway config if it exists
        run: |
          if gcloud api-gateway api-configs describe trello-backend-config \
            --api=trello-backend-api \
            --project=${{ secrets.GCP_PROJECT_ID }}; then
            gcloud api-gateway api-configs delete trello-backend-config \
              --api=trello-backend-api --project=${{ secrets.GCP_PROJECT_ID }} --quiet
          fi

      # Step 11: Create the new API Gateway configuration
      - name: Create API Gateway configuration
        run: |
          gcloud api-gateway api-configs create trello-backend-config \
              --api=trello-backend-api \
              --openapi-spec=new-api-gateway.yaml \
              --project=${{ secrets.GCP_PROJECT_ID }} \
              --backend-auth-service-account=${{ secrets.GCP_PROJECT_ID }}@appspot.gserviceaccount.com

      # Step 12: Deploy API Gateway with the new configuration
      - name: Deploy API Gateway
        run: |
          gcloud api-gateway gateways update trello-backend-gateway \
              --api=trello-backend-api \
              --api-config=trello-backend-config \
              --location=${{ secrets.GCP_REGION }} \
              --project=${{ secrets.GCP_PROJECT_ID }}

      # Step 13: Run tests (optional)
      - name: Run API tests
        run: |
          curl -X POST $USER_URL -d '{"query":"{ helloUser }"}'
          curl -X POST $TASK_URL -d '{"query":"{ helloTask }"}'
          curl -X POST $BOARD_URL -d '{"query":"{ helloBoard }"}'
